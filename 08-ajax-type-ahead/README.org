* Fetch

What does the fetch `api signature` look like in cljs?

#+BEGIN_SRC clojure
(defn "This is clojure")
#+END_SRC

What's the deal with this?  Lets start by understanding `->`in cljs

* Concurrency v. Parallelism



* Concurrency

Concurrency is about correctly, safely and efficiently sharing resources.  First person to get coffee, would make a pot of coffee.  This can be seen as a policy we setup and we use primitives to represent this.

We have 5 employees.  Each of the employees can be considered a thread.  Each person wants to get some coffee and there is only one coffee pot.

```
(dotimes [x 5]
  (.start (Thread (fn []
                      (Thread/sleep (rand-int 10000)
                      (println x "Im here")
                      (println x "I'm Grabbing coffee")
                      @coffee
                      (println x "sip"))))))
```

@coffee === (deref coffee)

* Regexs
 
These are a little fucked syntatically.  After a lot of searching, this resource - https://cljs.github.io/api/syntax/regex - was the first to actually explain, just a little, that in CLJ there is a special syntax to make this work.

Learn more about Atoms with https://purelyfunctional.tv/lesson/keeping-state-consistent-with-atoms/ video

I asked the question about how to debug inside of *filter* and realized I am a fool.  Here is a good answer from eggsyntax - 

*I’d start by calling the predicate function on some individual values, from the REPL. If you need to dig deeper than that (eg if the predicate is really complicated), it’s a great candidate for running in a debugger.

eg if I’m doing `(filter even? (range 5))`, I’d start in the repl by calling `(even? 0)`, `(even? 1)`, etc, until the behavior is totally clear. (edited)
 
Also you can definitely cause side effects from within `filter`. eg you could do `(filter #(do (println %) (even? %)) (range 5))`*

If you run into an error like this: Uncaught (in promise) Error: [object Object] is not ISeqable --> consider that it means you are trying to loop over an object that - can't do that!

The BIG takeaway is that you can use *do*.  This would be a great time in the docs to illustrate how to debug this in different ways!

There is not global regex concept in clojure or clojurescript so you should use *re-seq* over *re-matches* if this is the desired effect...kind of odd

How to get a specific item from a list
()

How to access a property in a map (object)

